// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: proto/controlserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlService_SendRobotStatus_FullMethodName            = "/proto.ControlService/SendRobotStatus"
	ControlService_SendLocationStatus_FullMethodName         = "/proto.ControlService/SendLocationStatus"
	ControlService_SendWaypointStream_FullMethodName         = "/proto.ControlService/SendWaypointStream"
	ControlService_GetRobotSetModeStream_FullMethodName      = "/proto.ControlService/GetRobotSetModeStream"
	ControlService_GetWaypointsStream_FullMethodName         = "/proto.ControlService/GetWaypointsStream"
	ControlService_GetPeripheralControlStream_FullMethodName = "/proto.ControlService/GetPeripheralControlStream"
	ControlService_GetJoystickControlStream_FullMethodName   = "/proto.ControlService/GetJoystickControlStream"
)

// ControlServiceClient is the client API for ControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlServiceClient interface {
	SendRobotStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RobotStatusData, RobotStatusReply], error)
	SendLocationStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LocationStatusData, LocationStatusReply], error)
	SendWaypointStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WaypointStreamData, LocationStatusReply], error)
	GetRobotSetModeStream(ctx context.Context, in *GetRobotSetModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRobotSetModeData], error)
	GetWaypointsStream(ctx context.Context, in *GetWaypointsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WaypointsData], error)
	GetPeripheralControlStream(ctx context.Context, in *GetPeripheralControlRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Peripherals], error)
	GetJoystickControlStream(ctx context.Context, in *GetJoystickControlRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VehicleThrustTorque], error)
}

type controlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlServiceClient(cc grpc.ClientConnInterface) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) SendRobotStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RobotStatusData, RobotStatusReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[0], ControlService_SendRobotStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RobotStatusData, RobotStatusReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_SendRobotStatusClient = grpc.ClientStreamingClient[RobotStatusData, RobotStatusReply]

func (c *controlServiceClient) SendLocationStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LocationStatusData, LocationStatusReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[1], ControlService_SendLocationStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LocationStatusData, LocationStatusReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_SendLocationStatusClient = grpc.ClientStreamingClient[LocationStatusData, LocationStatusReply]

func (c *controlServiceClient) SendWaypointStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WaypointStreamData, LocationStatusReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[2], ControlService_SendWaypointStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WaypointStreamData, LocationStatusReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_SendWaypointStreamClient = grpc.ClientStreamingClient[WaypointStreamData, LocationStatusReply]

func (c *controlServiceClient) GetRobotSetModeStream(ctx context.Context, in *GetRobotSetModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRobotSetModeData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[3], ControlService_GetRobotSetModeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRobotSetModeRequest, GetRobotSetModeData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_GetRobotSetModeStreamClient = grpc.ServerStreamingClient[GetRobotSetModeData]

func (c *controlServiceClient) GetWaypointsStream(ctx context.Context, in *GetWaypointsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WaypointsData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[4], ControlService_GetWaypointsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetWaypointsRequest, WaypointsData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_GetWaypointsStreamClient = grpc.ServerStreamingClient[WaypointsData]

func (c *controlServiceClient) GetPeripheralControlStream(ctx context.Context, in *GetPeripheralControlRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Peripherals], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[5], ControlService_GetPeripheralControlStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPeripheralControlRequest, Peripherals]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_GetPeripheralControlStreamClient = grpc.ServerStreamingClient[Peripherals]

func (c *controlServiceClient) GetJoystickControlStream(ctx context.Context, in *GetJoystickControlRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VehicleThrustTorque], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[6], ControlService_GetJoystickControlStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetJoystickControlRequest, VehicleThrustTorque]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_GetJoystickControlStreamClient = grpc.ServerStreamingClient[VehicleThrustTorque]

// ControlServiceServer is the server API for ControlService service.
// All implementations must embed UnimplementedControlServiceServer
// for forward compatibility.
type ControlServiceServer interface {
	SendRobotStatus(grpc.ClientStreamingServer[RobotStatusData, RobotStatusReply]) error
	SendLocationStatus(grpc.ClientStreamingServer[LocationStatusData, LocationStatusReply]) error
	SendWaypointStream(grpc.ClientStreamingServer[WaypointStreamData, LocationStatusReply]) error
	GetRobotSetModeStream(*GetRobotSetModeRequest, grpc.ServerStreamingServer[GetRobotSetModeData]) error
	GetWaypointsStream(*GetWaypointsRequest, grpc.ServerStreamingServer[WaypointsData]) error
	GetPeripheralControlStream(*GetPeripheralControlRequest, grpc.ServerStreamingServer[Peripherals]) error
	GetJoystickControlStream(*GetJoystickControlRequest, grpc.ServerStreamingServer[VehicleThrustTorque]) error
	mustEmbedUnimplementedControlServiceServer()
}

// UnimplementedControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlServiceServer struct{}

func (UnimplementedControlServiceServer) SendRobotStatus(grpc.ClientStreamingServer[RobotStatusData, RobotStatusReply]) error {
	return status.Errorf(codes.Unimplemented, "method SendRobotStatus not implemented")
}
func (UnimplementedControlServiceServer) SendLocationStatus(grpc.ClientStreamingServer[LocationStatusData, LocationStatusReply]) error {
	return status.Errorf(codes.Unimplemented, "method SendLocationStatus not implemented")
}
func (UnimplementedControlServiceServer) SendWaypointStream(grpc.ClientStreamingServer[WaypointStreamData, LocationStatusReply]) error {
	return status.Errorf(codes.Unimplemented, "method SendWaypointStream not implemented")
}
func (UnimplementedControlServiceServer) GetRobotSetModeStream(*GetRobotSetModeRequest, grpc.ServerStreamingServer[GetRobotSetModeData]) error {
	return status.Errorf(codes.Unimplemented, "method GetRobotSetModeStream not implemented")
}
func (UnimplementedControlServiceServer) GetWaypointsStream(*GetWaypointsRequest, grpc.ServerStreamingServer[WaypointsData]) error {
	return status.Errorf(codes.Unimplemented, "method GetWaypointsStream not implemented")
}
func (UnimplementedControlServiceServer) GetPeripheralControlStream(*GetPeripheralControlRequest, grpc.ServerStreamingServer[Peripherals]) error {
	return status.Errorf(codes.Unimplemented, "method GetPeripheralControlStream not implemented")
}
func (UnimplementedControlServiceServer) GetJoystickControlStream(*GetJoystickControlRequest, grpc.ServerStreamingServer[VehicleThrustTorque]) error {
	return status.Errorf(codes.Unimplemented, "method GetJoystickControlStream not implemented")
}
func (UnimplementedControlServiceServer) mustEmbedUnimplementedControlServiceServer() {}
func (UnimplementedControlServiceServer) testEmbeddedByValue()                        {}

// UnsafeControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServiceServer will
// result in compilation errors.
type UnsafeControlServiceServer interface {
	mustEmbedUnimplementedControlServiceServer()
}

func RegisterControlServiceServer(s grpc.ServiceRegistrar, srv ControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlService_ServiceDesc, srv)
}

func _ControlService_SendRobotStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlServiceServer).SendRobotStatus(&grpc.GenericServerStream[RobotStatusData, RobotStatusReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_SendRobotStatusServer = grpc.ClientStreamingServer[RobotStatusData, RobotStatusReply]

func _ControlService_SendLocationStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlServiceServer).SendLocationStatus(&grpc.GenericServerStream[LocationStatusData, LocationStatusReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_SendLocationStatusServer = grpc.ClientStreamingServer[LocationStatusData, LocationStatusReply]

func _ControlService_SendWaypointStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlServiceServer).SendWaypointStream(&grpc.GenericServerStream[WaypointStreamData, LocationStatusReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_SendWaypointStreamServer = grpc.ClientStreamingServer[WaypointStreamData, LocationStatusReply]

func _ControlService_GetRobotSetModeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRobotSetModeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).GetRobotSetModeStream(m, &grpc.GenericServerStream[GetRobotSetModeRequest, GetRobotSetModeData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_GetRobotSetModeStreamServer = grpc.ServerStreamingServer[GetRobotSetModeData]

func _ControlService_GetWaypointsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWaypointsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).GetWaypointsStream(m, &grpc.GenericServerStream[GetWaypointsRequest, WaypointsData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_GetWaypointsStreamServer = grpc.ServerStreamingServer[WaypointsData]

func _ControlService_GetPeripheralControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPeripheralControlRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).GetPeripheralControlStream(m, &grpc.GenericServerStream[GetPeripheralControlRequest, Peripherals]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_GetPeripheralControlStreamServer = grpc.ServerStreamingServer[Peripherals]

func _ControlService_GetJoystickControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJoystickControlRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).GetJoystickControlStream(m, &grpc.GenericServerStream[GetJoystickControlRequest, VehicleThrustTorque]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_GetJoystickControlStreamServer = grpc.ServerStreamingServer[VehicleThrustTorque]

// ControlService_ServiceDesc is the grpc.ServiceDesc for ControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendRobotStatus",
			Handler:       _ControlService_SendRobotStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendLocationStatus",
			Handler:       _ControlService_SendLocationStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendWaypointStream",
			Handler:       _ControlService_SendWaypointStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRobotSetModeStream",
			Handler:       _ControlService_GetRobotSetModeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetWaypointsStream",
			Handler:       _ControlService_GetWaypointsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPeripheralControlStream",
			Handler:       _ControlService_GetPeripheralControlStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetJoystickControlStream",
			Handler:       _ControlService_GetJoystickControlStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/controlserver.proto",
}
